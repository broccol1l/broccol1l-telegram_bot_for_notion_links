from datetime import datetime, timezone


from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from utils.validators import get_source_from_url, is_valid_url

import keyboards.buttons as kb
import database.requests as rq
from states.link_states import LinkStates as st

from notion_database.notion_database import create_page



async def add_link_command(message: Message, state: FSMContext):
    """Prompt user to send a URL for saving."""
    await message.answer("üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    await state.set_state(st.waiting_for_url)


# Process the URL
async def process_url(message: Message, state: FSMContext):
    """Process and save URL data."""
    url = message.text
    re_url = await is_valid_url(url)

    if re_url:
        await message.answer(f"‚úÖ –°—Å—ã–ª–∫–∞ '{url}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        await state.update_data(url=url)
        await message.answer("üìù –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å—Å—ã–ª–∫–∏.")
        await state.set_state(st.waiting_for_title)
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.")
        await state.set_state(st.waiting_for_url)


# Process the Title
async def process_title(message: Message, state: FSMContext):
    """Process and save title data."""
    title = message.text.capitalize()
    await state.update_data(title=title)
    await message.answer("üìÇ –ù–∞–ø–∏—à–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Å—Å—ã–ª–∫–∏.")
    await state.set_state(st.waiting_for_category)


# Process the Category
async def process_category(message: Message, state: FSMContext):
    """Process and save category data."""
    category = message.text.capitalize()
    await state.update_data(category=category)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    url = (await state.get_data()).get('url')  # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    source = await get_source_from_url(url)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(source=source)

    await message.answer(f"üîç –ò—Å—Ç–æ—á–Ω–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {source}\n\n"
                         "‚≠ê –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Å—Å—ã–ª–∫–∏:\n"
                         "1Ô∏è‚É£ - –°–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ—Å—Ç—å\n"
                         "2Ô∏è‚É£ - –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ—Å—Ç—å\n"
                         "3Ô∏è‚É£ - –°–∞–º–∞—è –Ω–∏–∑–∫–∞—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ—Å—Ç—å\n"
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3."
                         )

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —à–∞–≥—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    await state.set_state(st.waiting_for_priority)

async def process_priority(message: Message, state: FSMContext):
    priority = int(message.text)

    if priority <= 3 and priority >= 1:
        data = await state.get_data()

        url = data.get('url')
        title = data.get('title')
        category = data.get('category')
        source = data.get('source')
        tg_id = message.from_user.id

        timestamp = datetime.now(timezone.utc).isoformat()

        dt = datetime.fromisoformat(timestamp)

        formatted_timestamp = dt.strftime("%d-%m-%Y %H:%M:%S")

        notion_data = {
            "URL": {"title": [{"text": {"content": url}}]},
            "Title": {"rich_text": [{"text": {"content": title}}]},
            "Category": {"rich_text": [{"text": {"content": category}}]},
            "Source": {"rich_text": [{"text": {"content": source}}]},
            "Priority": {"number": priority},
            "Timestamp": {"date": {"start": timestamp}},
            "Telegram_user_id": {"number": tg_id}
        }
        await create_page(notion_data)

        await rq.add_link(
            tg_id=message.from_user.id,
            url=data['url'],
            title=data['title'],
            category=data['category'],
            source=data['source'],
            priority=priority
        )

        await message.answer("‚úÖ –°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
                             f"üîó *URL:* {data['url']}\n"
                             f"üìù *–ó–∞–≥–æ–ª–æ–≤–æ–∫:* {data['title']}\n"
                             f"üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {data['category']}\n"
                             f"üîç *–ò—Å—Ç–æ—á–Ω–∏–∫:* {data['source']}\n"
                             f"‚≠ê *–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* {priority}\n"
                             f"üìÖ *–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:* {formatted_timestamp}",
                             reply_markup=kb.main
                             )
        await state.clear()
    else:
        await message.answer("‚ùå–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3.")